#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/baae6c20-cbdb-4b68-978d-78adb5c382fb

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudColor color;
  float timeleft;
  float voltage;
  int bright;
  bool NEOPIXELS;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
  
  -Turn on/off Cloud
  -Change Color
  -Change Brightness
  -Turn off in 30 minutes
  -measure battery 
  -sleep mode to save power 
  - 2500 mAh battery.  12 leds on Neopixel ring.  0.5 run times.  ~20 mA per led = 240 mA.  120 mAh / run.  ~21 runs with 
  hopeful savings from low power mode 
*/

#include "thingProperties.h"
// Adafruit NeoPixel - Version: Latest 
#include <Adafruit_NeoPixel.h>
// WiFiNINA - Version: Latest 
#include <WiFiNINA.h>
#include <utility/wifi_drv.h>
// Arduino Low Power - Version: Latest 
#include "ArduinoLowPower.h"
#include "time.h"

#define LED_PIN     6 //NeoPixel Pin
#define LED_COUNT  12  // How many NeoPixels are attached to the Arduino?
//#define BRIGHTNESS 125 // Set BRIGHTNESS to about 1/5 (max = 255)
// Declare our NeoPixel strip object:
Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_RGBW + NEO_KHZ800);
//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)
//   NEO_RGBW    Pixels are wired for RGBW bitstream (NeoPixel RGBW products)

uint32_t rgbcolor = strip.ColorHSV(0, 0, 0);  //Initially off

//Timer
float LEDonMillis = 0;   // setting initial timer
float minutes = 30;                 //minutes for timer
float timer = minutes*60*1000;    // interval at which to blink (milliseconds)

  
//Get time
const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = -6;
const int daylightOffset_sec = 3600;

void setup() {
  pinMode(6, OUTPUT);
  strip.begin();           // INITIALIZE NeoPixel strip object (REQUIRED)
  strip.show();            // Turn OFF all pixels ASAP
  Serial.println(bright);

  Serial.begin(9600); // Initialize serial and wait for port to open:
  delay(1500);  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found

  //Establish MKR 1010 built in LED
  WiFiDrv::pinMode(25, OUTPUT); //define green pin
  WiFiDrv::pinMode(26, OUTPUT); //define red pin
  WiFiDrv::pinMode(27, OUTPUT); //define blue pin
  
  initProperties();  // Defined in thingProperties.h

  ArduinoCloud.begin(ArduinoIoTPreferredConnection);  // Connect to Arduino IoT Cloud

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  void printWiFiStatus(); //Wifi network info 

}

void loop() {
  ArduinoCloud.update();
  
  //Timer
  if(millis() - LEDonMillis > timer) {
    strip.clear();
    strip.show();
    NEOPIXELS = 0;
    timeleft = 0; 
    //Serial.println("LED timer turned off LEDs");
  }
  
  if (NEOPIXELS==1){
    timeleft = ((timer + LEDonMillis) - millis())/60000;
    Serial.print("Time left=");
    Serial.println(timeleft);
  }
  
  // read the input on analog pin 0:
  int sensorValue = analogRead(ADC_BATTERY);
  // Convert the analog reading (which goes from 0 - 1023) to a voltage (0 - 4.3V):
  voltage = sensorValue * (4.3 / 1023.0);
  // print out the value you read:
  //Serial.print(voltage);
  //Serial.println("V");
  
    // Triggers an infinite sleep (the device will be woken up only by the registered wakeup sources)
  // The power consumption of the chip will drop consistently
  LowPower.sleep(3000);
  //WiFi.lowPowerMode();
}

/*
  Since Bright is READ_WRITE variable, onBrightChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBrightChange()  {
  // Add your code here to act upon Bright change
  Serial.print("Brightness has been set to =");
  Serial.print(bright);
  Serial.println(); 
  rgbcolor = strip.ColorHSV(color.getValue().hue, color.getValue().sat, bright);
    for (int i = 0; i < LED_COUNT; i++){ //for all the LEDs
    strip.setPixelColor(i, rgbcolor); //turn off in cloud one
  }
  strip.show();
  delay(100);
}

/*
  Since NEOPIXELS is READ_WRITE variable, onNEOPIXELSChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onNEOPIXELSChange()  {
  // Add your code here to act upon NEOPIXELS change
  //Serial.println(NEOPIXELS);

  if (NEOPIXELS==1) {
    Serial.println("TURN ON NEOPIXELS"); 
    for (int i = 0; i < LED_COUNT; i++){ //for all the LEDs
      strip.setPixelColor(i, rgbcolor); //turn off in cloud one
    }
    strip.show();
    delay(100);
    
    LEDonMillis = millis();
    Serial.print("LEDs turned on at:");
    Serial.println(LEDonMillis);
    Serial.print("LEDS will turn off at:");
    Serial.println(LEDonMillis + timer);
    
    //WiFiDrv::analogWrite(25, 255); //GREEN
    //WiFiDrv::analogWrite(26, 0);   //RED
    //WiFiDrv::analogWrite(27, 0);   //BLUE
  }
  
  else {
    //TURN OFF NEOPIXELS
    Serial.println("Turn them off");
    strip.clear(); 
    strip.show();
    delay(100);
    timeleft = 0; 
    
    //WiFiDrv::digitalWrite(25, LOW); //GREEN
    //WiFiDrv::digitalWrite(26, LOW);   //RED
    //WiFiDrv::digitalWrite(27, LOW);   //BLUE
    //WiFiDrv::analogWrite(25, 0); //GREEN
    //WiFiDrv::analogWrite(26, 0);   //RED
    //WiFiDrv::analogWrite(27, 0);   //BLUE
  }
}

/*
  Since Color is READ_WRITE variable, onColorChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onColorChange()  {
  // Add your code here to act upon Color change
  Serial.print("Hue = ");
  Serial.println(color.getValue().hue);
  Serial.print("Saturation = ");
  Serial.println(color.getValue().sat);
  Serial.print("Brightness = ");
  Serial.println(color.getValue().bri);
  
  rgbcolor = strip.ColorHSV(color.getValue().hue, color.getValue().sat, color.getValue().bri);
  for (int i = 0; i < LED_COUNT; i++){ //for all the LEDs
    strip.setPixelColor(i, rgbcolor); //turn off in cloud one
  }
  strip.show();
  delay(100);
}

/*
  Since Timeleft is READ_WRITE variable, onTimeleftChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTimeleftChange()  {
  // Add your code here to act upon Timeleft change
  
}

/*
  Since Voltage is READ_WRITE variable, onVoltageChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onVoltageChange()  {
  // Add your code here to act upon Voltage change
}

